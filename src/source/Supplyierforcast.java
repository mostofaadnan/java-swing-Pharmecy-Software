/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package source;
import java.awt.HeadlessException;
import java.awt.print.PrinterException;
import java.io.IOException;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


import javax.swing.JOptionPane;

import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;


import net.proteanit.sql.DbUtils;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
/**
 *
 * @author adnan
 */
public class Supplyierforcast extends javax.swing.JInternalFrame {
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    
    /**
     * Creates new form Supplyierforcast
     * @throws java.sql.SQLException
     * @throws java.io.IOException
     */
    public Supplyierforcast() throws SQLException, IOException {
        initComponents();
        conn = Java_Connect.conectrDB();
        supplyerbox();
        AutoCompleteDecorator.decorate(suppliyername);
    }
     private void supplyerbox() throws SQLException {
     
     
        try {
            String sql = "Select supliyername from suplyierInfo";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            //tbl_employeeinfo.setModel(DbUtils.resultSetToTableModel(rs));
            while (rs.next()) {

                String category = rs.getString("supliyername");
                suppliyername.addItem(category);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }
    private void Table_Data() {
        int tree = 1;

        try {
            // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
            String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'Item Name',SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails cd WHERE invoicedate > date_add(now(), interval -7 day) AND (select ita.supliyer from item where ita.id=sd.procode)='"+suppliyername.getSelectedItem()+"' GROUP BY prcode ORDER BY SUM(qty) DESC ";
            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();
            datatbl.setModel(DbUtils.resultSetToTableModel(rs));
            /* while (rs.next()) {
            String procode = rs.getString("Code");
            String Itemname = rs.getString("Item");
            
            
              DefaultTableModel model2 = (DefaultTableModel) datatbl.getModel();
              model2.addRow(new Object[]{tree,procode,Itemname});
              tree++;
            
            }*/

        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        filtertypebox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        fromdatepayment = new com.toedter.calendar.JDateChooser();
        jLabel13 = new javax.swing.JLabel();
        todatepayment = new com.toedter.calendar.JDateChooser();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        viewbox = new javax.swing.JComboBox<>();
        counttxt = new javax.swing.JTextField();
        suppliyername = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        datatbl = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        countdaytextdata = new javax.swing.JLabel();
        producttextdata = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Supplier For Cast");

        jPanel1.setBackground(new java.awt.Color(67, 86, 86));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Suppliyer");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Count:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Filter Type:");

        filtertypebox.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        filtertypebox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "day", "Month", "Year", "Date Between", " " }));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("From");

        fromdatepayment.setDateFormatString("yyyy-MM-dd");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("To");

        todatepayment.setDateFormatString("yyyy-MM-dd");

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(102, 102, 102));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/submit.png"))); // NOI18N
        jButton5.setText("Submit");
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton6.setForeground(new java.awt.Color(102, 102, 102));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/report.png"))); // NOI18N
        jButton6.setText("Print");
        jButton6.setBorder(null);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("View");

        viewbox.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        viewbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Per Product" }));
        viewbox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                viewboxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        counttxt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        counttxt.setBorder(null);

        suppliyername.setEditable(true);
        suppliyername.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        suppliyername.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        suppliyername.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                suppliyernamePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewbox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(filtertypebox, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(suppliyername, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(counttxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromdatepayment, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(todatepayment, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel13)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(todatepayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromdatepayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(counttxt)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(viewbox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filtertypebox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(suppliyername, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );

        jPanel2.setBackground(new java.awt.Color(67, 86, 86));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        datatbl.setAutoCreateRowSorter(true);
        datatbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        datatbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "SI No", "Product Code", "Product Name", "Trade Price", "Sale Price", "Total Trade Price", "Total Invoice(Without VAT)", "Total Profit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        datatbl.setGridColor(new java.awt.Color(204, 204, 204));
        datatbl.setRowHeight(30);
        jScrollPane1.setViewportView(datatbl);

        countdaytextdata.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        countdaytextdata.setForeground(new java.awt.Color(0, 51, 51));
        countdaytextdata.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        producttextdata.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        producttextdata.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Supplier");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Count Type");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(producttextdata, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(10, 10, 10)
                .addComponent(countdaytextdata, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(countdaytextdata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(producttextdata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
/*        DefaultTableModel model2 = (DefaultTableModel) datatbl.getModel();
        model2.setRowCount(0);
        int tree = 1;
        
        String filtertype = (String) filtertypebox.getSelectedItem();
        if (viewbox.getSelectedIndex() == 0) {
            producttextdata.setText("All");

            if (filtertypebox.getSelectedIndex() > 0) {
                if (counttxt.getText().isEmpty()) {

                } else {

                    String counttype = counttxt.getText() + " " + filtertype;
                    countdaytextdata.setText(counttype);
                    int countdays = Integer.parseInt(counttxt.getText());
                    switch (filtertypebox.getSelectedIndex()) {
                        case 1:
                        try {
                            // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                            String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'ItemName',tradprice,unitrate,SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice',(SUM(qty)*tradprice) as 'totalTradeprice'  FROM cashsaledetails cd WHERE invoicedate > date_add(now(), interval -'" + countdays + "' day)   GROUP BY prcode ORDER BY SUM(qty) DESC ";
                            pst = conn.prepareStatement(sql);

                            rs = pst.executeQuery();
                            //datatbl.setModel(DbUtils.resultSetToTableModel(rs));
                            while (rs.next()) {
                                String procode = rs.getString("prcode");
                                String Itemname = rs.getString("ItemName");
                                double totalqty = rs.getDouble("TotalQuantity");
                                double TotalInvoice = rs.getDouble("TotalInvoice");
                                double totalTradeprice = rs.getDouble("totalTradeprice");
                                double tradprice = rs.getDouble("tradprice");
                                double unitrate = rs.getDouble("unitrate");
                                double totalprofit = TotalInvoice - totalTradeprice;

                                model2.addRow(new Object[]{tree, procode, Itemname, tradprice, unitrate, totalqty, totalTradeprice, TotalInvoice, totalprofit});
                                tree++;

                            }

                        } catch (SQLException | HeadlessException e) {
                            JOptionPane.showMessageDialog(null, e);

                        }
                        break;
                        case 2:
                        try {
                            // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                            String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'ItemName',tradprice,unitrate,SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice',(SUM(qty)*tradprice) as 'totalTradeprice'  FROM cashsaledetails cd WHERE invoicedate > date_add(now(), interval -'" + countdays + "' month)   GROUP BY prcode ORDER BY SUM(qty) DESC ";
                            pst = conn.prepareStatement(sql);

                            rs = pst.executeQuery();
                            //datatbl.setModel(DbUtils.resultSetToTableModel(rs));
                            while (rs.next()) {
                                String procode = rs.getString("prcode");
                                String Itemname = rs.getString("ItemName");
                                double totalqty = rs.getDouble("TotalQuantity");
                                double TotalInvoice = rs.getDouble("TotalInvoice");
                                double totalTradeprice = rs.getDouble("totalTradeprice");
                                double tradprice = rs.getDouble("tradprice");
                                double unitrate = rs.getDouble("unitrate");
                                double totalprofit = TotalInvoice - totalTradeprice;

                                model2.addRow(new Object[]{tree, procode, Itemname, tradprice, unitrate, totalqty, totalTradeprice, TotalInvoice, totalprofit});
                                tree++;

                            }

                        } catch (SQLException | HeadlessException e) {
                            JOptionPane.showMessageDialog(null, e);

                        }
                        break;
                        case 3:
                        //year count by all
                        try {
                            // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                            String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'ItemName',tradprice,unitrate,SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice',(SUM(qty)*tradprice) as 'totalTradeprice'  FROM cashsaledetails cd WHERE invoicedate > date_add(now(), interval -'" + countdays + "' year)   GROUP BY prcode ORDER BY SUM(qty) DESC ";
                            pst = conn.prepareStatement(sql);

                            rs = pst.executeQuery();
                            //datatbl.setModel(DbUtils.resultSetToTableModel(rs));
                            while (rs.next()) {
                                String procode = rs.getString("prcode");
                                String Itemname = rs.getString("ItemName");
                                double totalqty = rs.getDouble("TotalQuantity");
                                double TotalInvoice = rs.getDouble("TotalInvoice");
                                double totalTradeprice = rs.getDouble("totalTradeprice");
                                double tradprice = rs.getDouble("tradprice");
                                double unitrate = rs.getDouble("unitrate");
                                double totalprofit = TotalInvoice - totalTradeprice;

                                model2.addRow(new Object[]{tree, procode, Itemname, tradprice, unitrate, totalqty, totalTradeprice, TotalInvoice, totalprofit});
                                tree++;

                            }

                        } catch (SQLException | HeadlessException e) {
                            JOptionPane.showMessageDialog(null, e);

                        }
                        break;
                        case 4:
                        String fromdate=((JTextField) fromdatepayment.getDateEditor().getUiComponent()).getText();
                        String todate=((JTextField) todatepayment.getDateEditor().getUiComponent()).getText();
                        String countdatebetweeb =filtertype+": "+fromdate+" To "+todate;
                        countdaytextdata.setText(countdatebetweeb);
                        try {
                            // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                            String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'ItemName',tradprice,unitrate,SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice',(SUM(qty)*tradprice) as 'totalTradeprice'  FROM cashsaledetails cd WHERE invoicedate BETWEEN ? AND ?   GROUP BY prcode ORDER BY SUM(qty) DESC ";
                            pst = conn.prepareStatement(sql);
                            pst.setString(1, ((JTextField) fromdatepayment.getDateEditor().getUiComponent()).getText());
                            pst.setString(2, ((JTextField) todatepayment.getDateEditor().getUiComponent()).getText());
                            rs = pst.executeQuery();
                            //datatbl.setModel(DbUtils.resultSetToTableModel(rs));
                            while (rs.next()) {
                                String procode = rs.getString("prcode");
                                String Itemname = rs.getString("ItemName");
                                double totalqty = rs.getDouble("TotalQuantity");
                                double TotalInvoice = rs.getDouble("TotalInvoice");
                                double totalTradeprice = rs.getDouble("totalTradeprice");
                                double tradprice = rs.getDouble("tradprice");
                                double unitrate = rs.getDouble("unitrate");
                                double totalprofit = TotalInvoice - totalTradeprice;

                                model2.addRow(new Object[]{tree, procode, Itemname, tradprice, unitrate, totalqty, totalTradeprice, TotalInvoice, totalprofit});
                                tree++;

                            }

                        } catch (SQLException | HeadlessException e) {
                            JOptionPane.showMessageDialog(null, e);

                        }
                        break;
                        //nothing
                        default:
                        break;
                    }

                }
            }
        } else if (filtertypebox.getSelectedIndex() > 0) {

            if (counttxt.getText().isEmpty() || searchext.getText().isEmpty()) {

            } else {

                int countdays = Integer.parseInt(counttxt.getText());
                String procodesearch = searchext.getText();
                producttextdata.setText(procodesearch);
                String counttype = counttxt.getText() + " " + filtertype;
                countdaytextdata.setText(counttype);
                switch (filtertypebox.getSelectedIndex()) {

                    case 1:
                    //day count by by product

                    try {
                        // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                        String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'ItemName',tradprice,unitrate,SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice',(SUM(qty)*tradprice) as 'totalTradeprice'  FROM cashsaledetails cd WHERE invoicedate > date_add(now(), interval -'" + countdays + "' day) AND prcode='" + procodesearch + "'  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                        pst = conn.prepareStatement(sql);

                        rs = pst.executeQuery();
                        //datatbl.setModel(DbUtils.resultSetToTableModel(rs));
                        while (rs.next()) {
                            String procode = rs.getString("prcode");
                            String Itemname = rs.getString("ItemName");
                            double totalqty = rs.getDouble("TotalQuantity");
                            double TotalInvoice = rs.getDouble("TotalInvoice");
                            double totalTradeprice = rs.getDouble("totalTradeprice");
                            double tradprice = rs.getDouble("tradprice");
                            double unitrate = rs.getDouble("unitrate");
                            double totalprofit = TotalInvoice - totalTradeprice;

                            model2.addRow(new Object[]{tree, procode, Itemname, tradprice, unitrate, totalqty, totalTradeprice, TotalInvoice, totalprofit});
                            tree++;

                        }

                    } catch (SQLException | HeadlessException e) {
                        JOptionPane.showMessageDialog(null, e);

                    }
                    break;
                    case 2:
                    //month count by product

                    try {
                        // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                        String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'ItemName',tradprice,unitrate,SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice',(SUM(qty)*tradprice) as 'totalTradeprice'  FROM cashsaledetails cd WHERE invoicedate > date_add(now(), interval -'" + countdays + "' month) AND prcode='" + procodesearch + "'  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                        pst = conn.prepareStatement(sql);

                        rs = pst.executeQuery();
                        //datatbl.setModel(DbUtils.resultSetToTableModel(rs));
                        while (rs.next()) {
                            String procode = rs.getString("prcode");
                            String Itemname = rs.getString("ItemName");
                            double totalqty = rs.getDouble("TotalQuantity");
                            double TotalInvoice = rs.getDouble("TotalInvoice");
                            double totalTradeprice = rs.getDouble("totalTradeprice");
                            double tradprice = rs.getDouble("tradprice");
                            double unitrate = rs.getDouble("unitrate");
                            double totalprofit = TotalInvoice - totalTradeprice;

                            model2.addRow(new Object[]{tree, procode, Itemname, tradprice, unitrate, totalqty, totalTradeprice, TotalInvoice, totalprofit});
                            tree++;

                        }

                    } catch (SQLException | HeadlessException e) {
                        JOptionPane.showMessageDialog(null, e);

                    }
                    break;
                    case 3:
                    //year count by product

                    try {
                        // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                        String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'ItemName',tradprice,unitrate,SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice',(SUM(qty)*tradprice) as 'totalTradeprice'  FROM cashsaledetails cd WHERE invoicedate > date_add(now(), interval -'" + countdays + "' year) AND prcode='" + procodesearch + "'  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                        pst = conn.prepareStatement(sql);

                        rs = pst.executeQuery();
                        //datatbl.setModel(DbUtils.resultSetToTableModel(rs));
                        while (rs.next()) {
                            String procode = rs.getString("prcode");
                            String Itemname = rs.getString("ItemName");
                            double totalqty = rs.getDouble("TotalQuantity");
                            double TotalInvoice = rs.getDouble("TotalInvoice");
                            double totalTradeprice = rs.getDouble("totalTradeprice");
                            double tradprice = rs.getDouble("tradprice");
                            double unitrate = rs.getDouble("unitrate");
                            double totalprofit = TotalInvoice - totalTradeprice;

                            model2.addRow(new Object[]{tree, procode, Itemname, tradprice, unitrate, totalqty, totalTradeprice, TotalInvoice, totalprofit});
                            tree++;

                        }

                    } catch (SQLException | HeadlessException e) {
                        JOptionPane.showMessageDialog(null, e);

                    }
                    break;
                    case 4:
                    String fromdate=((JTextField) fromdatepayment.getDateEditor().getUiComponent()).getText();
                    String todate=((JTextField) todatepayment.getDateEditor().getUiComponent()).getText();
                    String countdatebetweebhere =filtertype+": "+fromdate+" To "+todate;
                    countdaytextdata.setText(countdatebetweebhere);
                    try {
                        // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                        String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'ItemName',tradprice,unitrate,SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice',(SUM(qty)*tradprice) as 'totalTradeprice'  FROM cashsaledetails cd WHERE invoicedate BETWEEN ? AND ? AND prcode='" + procodesearch + "'  GROUP BY prcode ORDER BY SUM(qty) DESC ";
                        pst = conn.prepareStatement(sql);
                        pst.setString(1, ((JTextField) fromdatepayment.getDateEditor().getUiComponent()).getText());
                        pst.setString(2, ((JTextField) todatepayment.getDateEditor().getUiComponent()).getText());
                        rs = pst.executeQuery();
                        //datatbl.setModel(DbUtils.resultSetToTableModel(rs));
                        while (rs.next()) {
                            String procode = rs.getString("prcode");
                            String Itemname = rs.getString("ItemName");
                            double totalqty = rs.getDouble("TotalQuantity");
                            double TotalInvoice = rs.getDouble("TotalInvoice");
                            double totalTradeprice = rs.getDouble("totalTradeprice");
                            double tradprice = rs.getDouble("tradprice");
                            double unitrate = rs.getDouble("unitrate");
                            double totalprofit = TotalInvoice - totalTradeprice;

                            model2.addRow(new Object[]{tree, procode, Itemname, tradprice, unitrate, totalqty, totalTradeprice, TotalInvoice, totalprofit});
                            tree++;

                        }

                    } catch (SQLException | HeadlessException e) {
                        JOptionPane.showMessageDialog(null, e);

                    }
                    break;
                    //nothing
                    default:
                    break;
                }

            }

        }
*/
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            boolean complete = datatbl.print();
            if (complete) {

            } else {
                /*show a message indicating that printing was cancelled */

            }
        } catch (PrinterException pe) {
            /* Printing failed, report to the user */

        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void viewboxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_viewboxPopupMenuWillBecomeInvisible
        /*      searchext.setText(null);
        filtertypebox.setSelectedIndex(0);
        counttxt.setText(null);
        DefaultTableModel model2 = (DefaultTableModel) datatbl.getModel();
        model2.setRowCount(0);
        if(viewbox.getSelectedIndex()==0){
            counttxt.setEnabled(true);

        }else{
            searchext.setEnabled(true);
            counttxt.setEnabled(true);
        }

        */
    }//GEN-LAST:event_viewboxPopupMenuWillBecomeInvisible

    private void suppliyernamePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_suppliyernamePopupMenuWillBecomeInvisible
        try {
            String supname=(String) suppliyername.getSelectedItem();
            String sql = "Select id,supliyername from suplyierInfo where supliyername='"+supname+"'";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            //tbl_employeeinfo.setModel(DbUtils.resultSetToTableModel(rs));
            while (rs.next()) {

                String supid = rs.getString("supliyername");
                //suppliyername.addItem(category);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }
        
         try {
            // String sql = "SELECT prcode, SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails  WHERE convert(datetime,invoicedate,101)  BETWEEN (Getdate() - 6) AND Getdate()  GROUP BY prcode ORDER BY SUM(qty) DESC ";
            String sql = "SELECT prcode,(select itemName from item it where it.itemcode=cd.prcode) as 'Item Name',SUM(qty) AS 'TotalQuantity', SUM(totalamount) AS 'TotalInvoice'  FROM cashsaledetails cd WHERE invoicedate > date_add(now(), interval -7 day) AND (select ita.supliyer from item ita where ita.id=cd.prcode)='"+suppliyername.getSelectedItem()+"' GROUP BY prcode ORDER BY SUM(qty) DESC ";
            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();
            datatbl.setModel(DbUtils.resultSetToTableModel(rs));
            /* while (rs.next()) {
            String procode = rs.getString("Code");
            String Itemname = rs.getString("Item");
            
            
              DefaultTableModel model2 = (DefaultTableModel) datatbl.getModel();
              model2.addRow(new Object[]{tree,procode,Itemname});
              tree++;
            
            }*/

        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }//GEN-LAST:event_suppliyernamePopupMenuWillBecomeInvisible


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countdaytextdata;
    private javax.swing.JTextField counttxt;
    private javax.swing.JTable datatbl;
    private javax.swing.JComboBox<String> filtertypebox;
    private com.toedter.calendar.JDateChooser fromdatepayment;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel producttextdata;
    private javax.swing.JComboBox<String> suppliyername;
    private com.toedter.calendar.JDateChooser todatepayment;
    private javax.swing.JComboBox<String> viewbox;
    // End of variables declaration//GEN-END:variables
}
